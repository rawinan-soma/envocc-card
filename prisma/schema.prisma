generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
// model access_levels {
//   level_id           Int      @id @unique(map: "level_id")
//   validate_documents Int?
//   authorize_users    Int?
//   add_card           Int?
//   add_institution    Int?
//   add_admin          Int?
//   add_seal           Int?
//   add_document       Int?
//   data_institution   Int?
//   data_province      Int?
//   data_region        Int?
//   data_nation        Int?
//   admins             admins[]
// }

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model admins {
  id                 Int                 @id @unique() @default(autoincrement())
  role               String              @default("admin")
  username           String              @unique @db.VarChar(255)
  password           String              @db.VarChar(255)
  // level              Int
  pname              String              @db.VarChar(255)
  fname              String              @db.VarChar(255)
  lname              String              @db.VarChar(255)
  private_number     String              @db.VarChar(255)
  work_number        String
  email              String              @unique @db.VarChar(255)
  positionId         Int
  positionLvId       Int
  is_validate        Boolean             @default(true)
  create_date        DateTime            @default(now()) @db.Timestamptz()
  hashedRefreshToken String?
  // access_levels      access_levels       @relation(fields: [level], references: [level_id], onDelete: Cascade, onUpdate: NoAction, map: "admins_ibfk_1")
  experiences_files  experiences_files[]
  requests           requests[]
  position           positions           @relation(fields: [positionId], references: [position_id])
  position_lv        position_lvs        @relation(fields: [positionLvId], references: [position_lv_id])
  adminOnOrg         adminOnOrg[]

  // @@index([level], map: "level")
}

enum OrgLevel {
  MINISTRY
  DEPARTMENT
  REGION
  PROVINCE
  UNIT
}

model organizations {
  id       Int             @id @unique @default(autoincrement())
  code     String
  name_th  String
  name_eng String
  level    OrgLevel
  parentId Int?
  parent   organizations?  @relation("OrgHierachy", fields: [parentId], references: [id])
  children organizations[] @relation("OrgHierachy")

  adminOnOrg     adminOnOrg[]
  userOnOrg      userOnOrg[]
  orgOnSeal      orgOnSeal[]
  orgOnSignature orgOnSignature[]

  province   province?   @relation(fields: [provinceId], references: [provinceId])
  provinceId Int?
  executive  positions[]
}

model province {
  provinceId    Int    @id @unique
  health_region Int
  name_th       String
  name_eng      String

  organization organizations[]
}

model orgOnSeal {
  orgId  Int
  sealId Int

  organization organizations @relation(fields: [orgId], references: [id])
  seal         seals         @relation(fields: [sealId], references: [id])

  @@id([orgId, sealId])
}

model orgOnSignature {
  orgId       Int
  signatureId Int

  organization organizations @relation(fields: [orgId], references: [id])
  signature    signatures    @relation(fields: [signatureId], references: [id])

  @@id([orgId, signatureId])
}

model adminOnOrg {
  adminId Int
  orgId   Int

  admin        admins        @relation(fields: [adminId], references: [id])
  organization organizations @relation(fields: [orgId], references: [id])

  @@id([adminId, orgId])
}

model userOnOrg {
  userId Int
  orgId  Int

  user         users         @relation(fields: [userId], references: [id])
  organization organizations @relation(fields: [orgId], references: [id])

  @@id([userId, orgId])
}

model seals {
  id          Int         @id @unique(map: "seal_id") @default(autoincrement())
  filename    String?     @unique @db.VarChar(255)
  url         String?
  create_date DateTime    @default(now()) @db.Timestamptz()
  userId      Int
  seal_name   String
  orgOnSeal   orgOnSeal[]
}

// model adminDep {
//   admins      admins      @relation(references: [id], fields: [admin])
//   departments departments @relation(references: [id], fields: [department])
//   admin       Int         @unique
//   department  Int
// }

// model adminInst {
//   admins       admins       @relation(references: [id], fields: [admin])
//   institutions institutions @relation(references: [id], fields: [institution])
//   admin        Int          @unique
//   institution  Int
// }

// model adminMinis {
//   admins     admins     @relation(references: [id], fields: [admin])
//   ministries ministries @relation(references: [id], fields: [ministry])
//   admin      Int        @unique
//   ministry   Int
// }

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
// model departments {
//   id         Int        @id @unique(map: "department_id")
//   name_th    String     @db.VarChar(255)
//   name_eng   String     @db.VarChar(255)
//   ministry   Int
//   ministries ministries @relation(fields: [ministry], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "departments_ibfk_1")

//   seals        seals          @relation(fields: [seal], references: [id])
//   adminDep     adminDep[]
//   seal         Int
//   sign_persons sign_persons[]
//   userDep      userDep[]

//   instituions institutions[]

//   @@index([ministry], map: "ministry")
// }

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model documents {
  id          Int       @id @unique() @default(autoincrement())
  doc_type    Int?
  doc_name    String?   @unique @db.VarChar(255)
  filename    String?
  url         String?
  create_date DateTime? @default(now()) @db.Timestamptz()
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model envocc_card_files {
  id          Int       @id @unique() @default(autoincrement())
  userId      Int?
  filename    String?   @unique @db.VarChar(255)
  url         String?
  create_date DateTime? @default(now()) @db.Timestamptz()
  user        users?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "envocc_card_files_ibfk_1")

  // @@index([user])
}

// model epositions {
//   eposition_id       Int            @id @unique(map: "eposition_id")
//   eposition_name_th  String         @db.VarChar(255)
//   eposition_name_eng String         @db.VarChar(255)
//   institutionId      Int
//   institution        organizations? @relation(fields: [institutionId], references: [id])
//   users              users[]
// }

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model exp_files {
  id          Int       @id @unique() @default(autoincrement())
  userId      Int?
  filename    String?   @unique @db.VarChar(255)
  url         String?
  create_date DateTime? @default(now()) @db.Timestamptz()
  user        users?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "exp_files_ibfk_1")

  // @@index([user])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model experiences {
  exp_id         Int       @id @unique(map: "exp_id") @default(autoincrement())
  userId         Int?
  exp_fdate      DateTime? @db.Date
  exp_ldate      DateTime? @db.Date
  exp_years      Int?
  exp_typeoffice Int?
  exp_office     String?   @db.VarChar(255)
  exp_position   String?   @db.VarChar(255)
  exp_work       String?   @db.VarChar(255)
  create_date    DateTime? @default(now()) @db.Timestamptz()
  user           users?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "experience_ibfk_1")

  // @@index([user])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model experiences_files {
  experience_file_id Int       @id @unique(map: "experience_file_id") @default(autoincrement())
  adminId            Int?
  exp_file           String?   @unique @db.VarChar(255)
  url                String?
  create_date        DateTime? @default(now()) @db.Timestamptz()
  admin              admins?   @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "experiences_files_ibfk_1")

  // @@index([admin], map: "admin")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model gov_card_files {
  id          Int       @id @unique(map: "gov_card_file_id") @default(autoincrement())
  userId      Int?
  filename    String?   @unique @db.VarChar(255)
  url         String?
  create_date DateTime? @default(now()) @db.Timestamptz()
  user        users?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "gov_card_files_ibfk_1")

  // @@index([user])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
// model institutions {
//   id       Int    @id @unique(map: "institution_id") @default(autoincrement())
//   code     String @db.VarChar(10)
//   name_th  String @db.VarChar(255)
//   name_eng String @db.VarChar(255)

//   province      Int
//   health_region Int

//   epositions  epositions[]
//   adminInst   adminInst[]
//   userInst    userInst[]
//   departments departments? @relation(fields: [department], references: [id])
//   department  Int
// }

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model members {
  member_id   Int         @unique @default(autoincrement())
  member_no   Int?
  userId      Int
  start_date  DateTime?   @db.Date
  end_date    DateTime?   @db.Date
  qrcode      String?     @db.VarChar(255)
  qrcode_pass String?     @db.VarChar(255)
  signatureId Int?
  is_active   Boolean     @default(true)
  num_print   Int         @default(2)
  create_date DateTime    @default(now()) @db.Timestamptz()
  user        users       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "members_ibfk_1")
  signature   signatures? @relation(fields: [signatureId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([member_id])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
// model ministries {
//   id          Int           @id @unique(map: "ministry_id")
//   name_th     String        @db.VarChar(255)
//   name_eng    String        @db.VarChar(255)
//   departments departments[]
//   adminMinis  adminMinis[]
// }

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model photos {
  id          Int       @id @unique(map: "photo_id") @default(autoincrement())
  userId      Int?
  filename    String?   @unique @db.VarChar(255)
  url         String?
  create_date DateTime? @default(now()) @db.Timestamptz()
  user        users?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "photos_ibfk_1")

  // @@index([user])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model request_files {
  id          Int       @id @unique(map: "request_file_id") @default(autoincrement())
  userId      Int?
  filename    String?   @unique @db.VarChar(255)
  url         String?
  create_date DateTime? @default(now()) @db.Timestamptz()
  user        users?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "request_files_ibfk_1")

  // @@index([user])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model request_statuses {
  status_id   Int        @id @unique(map: "status_id")
  status_name String     @db.VarChar(255)
  requests    requests[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model requests {
  id               Int              @unique(map: "req_id") @default(autoincrement())
  userId           Int
  request_status   Int
  request_type     Int
  approver         Int?
  description      String?          @default("")
  date_update      DateTime         @default(now()) @db.Timestamptz()
  user             users            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "requests_ibfk_1")
  admins           admins?          @relation(fields: [approver], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "requests_ibfk_2")
  request_statuses request_statuses @relation(fields: [request_status], references: [status_id], onDelete: Cascade, onUpdate: NoAction, map: "requests_ibfk_3")
  // @@index([user])

  // @@id([req_id])
  @@index([approver], map: "approver")
  @@index([request_status], map: "request_status")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model resetpass {
  resetpass_req_id                  Int       @id @unique(map: "resetpass_req_id") @default(autoincrement())
  user                              Int?
  user_email                        String?   @db.VarChar(255)
  token                             String?   @db.VarChar(255)
  expiration_time                   DateTime? @db.Time(0)
  users_resetpass_userTousers       users?    @relation("resetpass_userTousers", fields: [user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "resetpass_ibfk_1")
  users_resetpass_user_emailTousers users?    @relation("resetpass_user_emailTousers", fields: [user_email], references: [email], onDelete: Cascade, onUpdate: NoAction, map: "resetpass_ibfk_2")

  @@index([user])
  @@index([user_email], map: "user_email")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model signatures {
  id                 Int      @id @unique(map: "sign_person_id") @default(autoincrement())
  sign_person_pname  String   @db.VarChar(100)
  sign_person_name   String   @db.VarChar(255)
  sign_person_lname  String   @db.VarChar(255)
  filename           String   @unique @db.VarChar(255)
  url                String?
  position           String   @db.VarChar(255)
  sign_person_active Boolean  @default(true)
  create_date        DateTime @default(now()) @db.Timestamptz()
  admin              Int

  members members[]

  orgOnSignature orgOnSignature[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  id                                    Int                 @unique(map: "id") @default(autoincrement())
  cid                                   String              @unique
  username                              String              @unique @db.VarChar(255)
  password                              String              @db.VarChar(255)
  role                                  String              @default("user")
  pname_th                              String
  pname_other_th                        String              @db.VarChar(255)
  fname_th                              String              @db.VarChar(255)
  lname_th                              String              @db.VarChar(255)
  pname_en                              String
  pname_other_en                        String              @db.VarChar(255)
  fname_en                              String              @db.VarChar(255)
  lname_en                              String              @db.VarChar(255)
  birthday                              DateTime            @db.Date
  nationality                           String              @db.VarChar(255)
  blood                                 String
  work_number                           String
  private_number                        String
  email                                 String              @unique(map: "email") @db.VarChar(255)
  house_number1                         String              @db.VarChar(255)
  moo1                                  Int?
  alley1                                String?             @db.VarChar(255)
  road1                                 String?             @db.VarChar(255)
  province1                             Int
  amphures1                             Int
  district1                             Int
  zip_code1                             Int
  house_number2                         String              @db.VarChar(255)
  moo2                                  Int?
  alley2                                String?             @db.VarChar(255)
  road2                                 String?             @db.VarChar(255)
  province2                             Int
  amphures2                             Int
  district2                             Int
  zip_code2                             Int
  e_learning                            Int
  approve                               Boolean
  is_validate                           Boolean             @default(false)
  create_date                           DateTime            @default(now()) @db.Timestamptz()
  hashedRefreshToken                    String?
  envocc_card_files                     envocc_card_files[]
  exp_files                             exp_files[]
  experiences                           experiences[]
  gov_card_files                        gov_card_files[]
  members                               members[]
  photos                                photos[]
  request_files                         request_files[]
  requests                              requests[]
  resetpass_resetpass_userTousers       resetpass[]         @relation("resetpass_userTousers")
  resetpass_resetpass_user_emailTousers resetpass[]         @relation("resetpass_user_emailTousers")

  position      positions?    @relation(fields: [positionId], references: [position_id])
  positionId    Int?
  position_lv   position_lvs? @relation(fields: [position_lvId], references: [position_lv_id])
  position_lvId Int?
  userOnOrg     userOnOrg[]

  @@id([username, email, id])
}

// model userInst {
//   users        users        @relation(references: [id], fields: [user])
//   institutions institutions @relation(references: [id], fields: [institution])

//   user        Int @unique
//   institution Int
// }

// model userDep {
//   users users @relation(references: [id], fields: [user])
//   user  Int   @unique

//   departments departments @relation(references: [id], fields: [department])
//   department  Int
// }

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model positions {
  position_id       Int            @id
  position_name     String?        @db.VarChar(100)
  position_name_eng String?        @db.VarChar(100)
  users             users[]
  admins            admins[]
  organization      organizations? @relation(fields: [orgId], references: [id])
  orgId             Int?
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model position_lvs {
  position_lv_id       Int      @id
  position_lv_name     String?  @db.VarChar(100)
  position_lv_name_eng String?  @db.VarChar(100)
  users                users[]
  admins               admins[]
}
